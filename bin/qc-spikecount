#!/usr/bin/env python
"""
Usage:
    qc-spikecount <nifti> <output> <bval>

    nifti -- input 4D nifti image (fMRI or DTI)
    output -- output .csv file
    bval -- bval file (for DTI)

Calculates the mean and standard deviation of each axial slice over all TRs.
Counts the number of outliers across all slices, and prints this number to
the text file 'output'.

If bval is supplied (for DTI), we remove all time points that are B0.
"""

import os, sys
from copy import copy
import numpy as np
import nibabel as nib
import logging

logging.basicConfig(level=logging.WARN, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))

def reorient_4d_image(image):
    """
    Reorients the data to radiological, one TR at a time
    """
    for i in np.arange(image.shape[3]):

        if i == 0:
            newimage = np.transpose(image[:, :, :, i], (2,0,1))
            newimage = np.rot90(newimage, 2)

        elif i == 1:
            tmpimage = np.transpose(image[:, :, :, i], (2,0,1))
            tmpimage = np.rot90(tmpimage, 2)
            newimage = np.concatenate((newimage[...,np.newaxis], tmpimage[...,np.newaxis]), axis=3)

        else:
            tmpimage = np.transpose(image[:, :, :, i], (2,0,1))
            tmpimage = np.rot90(tmpimage, 2)
            newimage = np.concatenate((newimage, tmpimage[...,np.newaxis]), axis=3)

    image = copy(newimage)

    return image

def main(nifti, output, bval=None):

    logging.info('Starting')

    nifti = reorient_4d_image(nib.load(nifti).get_data())

    if bval:
        bval = np.genfromtxt(bval)
        idx = np.where(bval != 0)[0]
        nifti = nifti[:, :, :, idx]

    x = nifti.shape[1]
    y = nifti.shape[2]
    z = nifti.shape[0]
    t = nifti.shape[3]
    spikecount = 0

    for i in np.arange(z):
        for j in np.arange(t):

            sample = nifti[i, :, :, j]
            mean = np.mean(sample)
            sd = np.std(sample)

            if j == 0:
                v_mean = copy(mean)
                v_sd = copy(sd)
            else:
                v_mean = np.hstack((v_mean, mean))
                v_sd = np.hstack((v_sd, sd))

            above = len(np.where(v_mean > np.mean(v_mean)+np.mean(v_sd))[0])
            below = len(np.where(v_mean < np.mean(v_mean)-np.mean(v_sd))[0])
            spikecount = spikecount + above + below

    with open(output, 'w') as f:
        f.write(str(spikecount) + '\n')

if __name__ == '__main__':
    if len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    elif len(sys.argv) == 4:
        main(sys.argv[1], sys.argv[2], bval=sys.argv[3])
    else:
        print(__doc__)
